#!/bin/bash
usage() {
>&2 cat << EOF

   Simple gaussian sbatch wrapper written by jhli
   Available options:
-i Name of the gaussian input file; must be given, file suffix: *.com
-t Wall time limit for the calculation. Must be given; format: 1-00:00:00 or 12:00:00

   Optional options:
-A The account used for the calculation; default is manually specified in this wrapper. tu|hans
-p Which node type to use (e.g. fat), default is not used
-E The exclusive option is used. default is not used
-v Gaussian module to use. optional, default is g09D01. other: g09E01 g16A01 g16B01
-J The name of the job (e.g. specified with the -J flag). Same as filename if not specified.
-m The memory allocation in GB used by the Gaussian job. Optional, default is taken from inputfile
-l Number of Linda workers that will be used. Optional, default is the same with \$nodes
-n Number of threads each Linda worker will use. Optional, default is taken from inputfile
-t Wall time limit for the calculation. Must be given
-W The work-directory for the calculation. Optional
-N Number of compute nodes that will be used. Optional, default is 1
-x Name of gaussian binary. default is 'g09', you can also specific g09.orig
-d don't submmit the job, just generate the sbatch script: ttt.sh
-h help, display this message

   Examples: (The -m -n -N options seem to be not needed at all)
$0 -i job.com -t 3-00:00:00
$0 -i job.com -t 7-00:00:00 -A snic2017-34-43 -E
$0 -i job.com -t 10:00:00 -J Single_point -v g16B01
$0 -i job.com -t 4-12:00:00 -A tu -E -v g09E01 -d

EOF
}

proc_input () {
local inputfile=$1
filename=${inputfile%.*}
filesuffix=${inputfile##*.}
[[ -z $(grep "^%" $inputfile | grep mem) ]] && echo "memory not specified in $inputfile" && exit 1 || imem=$(grep "^%" $inputfile | grep mem | cut -f2 -d'=')
[[ -z $(grep "^%" $inputfile | grep proc) ]] && echo "proc not specified in $inputfile" && exit 1 || iproc=$(grep "^%" $inputfile | grep proc | sed /linda/d | cut -f2 -d'=')
[[ ! -z $(grep "^%" $inputfile | grep -i linda) ]] && lindaflag=1 && linda=$(grep "^%" $inputfile | grep -i linda)
[[ -z $(grep "\.chk$" $inputfile) ]] && echo "chk file not specified in $inputfile" && exit 1 || ichk=$(grep "^%" $inputfile | grep "\.chk$" | cut -f2 -d'=')
[[ ${ichk%.*} != $filename ]] && echo "chk filename in $inputfile is not $filename" && exit 1
}

gethost() {
# b-an0 kebnekaise; t-an0 abisko
hostlist=('tegner' 'b-an0' 't-an0' 'tetralith' 'rackham')
for i in $(seq 0 4); do
   [[ ! -z $(hostname | grep ${hostlist[i]}) ]] && HOST=${hostlist[i]}
done
[[ -z $HOST ]] && echo "Currently supported clusters are 'tegner' 'kebnekaise' 'abisko' 'tetralith' 'rackham'" && exit 1

case $HOST in
   'tegner') 
   account=$(echo $1 | sed 's/snic//g; s/SNIC//g')
   gau_module='gaussian/g09.D01'
   additional=$(echo -e "export GAUSS_SCRDIR=/cfs/klemming/scratch/\${USER:0:1}/\${USER}/scratch_gaussian\ntest -d \$GAUSS_SCRDIR || mkdir -p \$GAUSS_SCRDIR")
   ;;
   'b-an0' | 't-an0')
   MOPA='export MODULEPATH=$MODULEPATH:/pfs/nobackup/home/j/jhli/soft/my_modules'
   if [ -z $gausversion ]; then
      gau_module='g09.d01'
   else
      case $gausversion in
         'g09D01')   gau_module='g09.d01';;
         'g09E01'|'gaussian/09.e.01-AVX')   gau_module='gaussian/09.e.01-AVX';;
         'g16A03'|'gaussian/16.A.03-AVX2')   gau_module='gaussian/16.A.03-AVX2';;
         'g16B01'|'gaussian/16.B.01-AVX2')   gau_module='gaussian/16.B.01-AVX2';;
         *) echo "only g09D01, g09E01, g16A02 and g16B01 are available on kebnekaise. e.g. ... -v g16B01 ...\n" && exit 1;;
      esac
   fi
   ;;
   'tetralith')
   MOPA='export MODULEPATH=$MODULEPATH:/home/y_lijun/soft/modules'
   if [ -z $gausversion ]; then 
      gau_module='my_g09d01'
   else
      case $gausversion in
         'g09D01')   gau_module='my_g09d01';;
         'g09E01'|'Gaussian/09.E.01-avx-nsc1-bdist')  gau_module='Gaussian/09.E.01-avx-nsc1-bdist';;
         'g16B01'|'Gaussian/16.B.01-avx2-nsc1-bdist') gau_module='Gaussian/16.B.01-avx2-nsc1-bdist';;
         *) echo -e "only g09D01, g09E01 and g16B01 are available on tetralith. e.g. ... -v g16B01 ...\n" && exit 1;;
      esac
   fi
   ;;
   'rackham')
   PARTITION='#SBATCH -p node'
   gau_module='gaussian/g09.d01'
   [[ ! -z $gausversion ]] && echo "Only g09D01 is available on rackham, omiting the version you specified...\n"
   additional=$(echo -e "ulimit -s $STACKLIMIT\nexport OMP_NUM_THREADS=1")
   ;;
esac
}

while getopts :A:i:p:Ev:J:m:n:t:W:N:dhx: opt; do
case $opt in
   A)   account=$OPTARG;;
   i)   inputfile=$OPTARG;;   # must be given
   t)   wtime=$OPTARG;;       # must be given
   p)   partition=$OPTARG;;
   E)   exclusive=1;;
   v)   gausversion=$OPTARG;;
   J)   jobname=$OPTARG;;
   m)   memory=$OPTARG;;      # not used
   n)   nprocshared=$OPTARG;; # not used
   W)   workdir=$OPTARG;;
   N)   nodes=$OPTARG;;       # not used
   x)   gaubin=$OPTARG;;      # not used
   d)   dryrun=1;;
   h)   usage; exit 0;;
   ?)   echo unknown arguments; usage; exit 1;;
esac
done

# process the "must be given" arguments
[[ $# -le 1 ]] && usage && exit 0
[[ -z $wtime ]] && echo "please specific the wall time, e.g. -t 1-00:00:00" && exit 1
[[ -z $inputfile ]] && echo "Gaussian input with suffix must be specified!" && exit 1
[[ ! -f $inputfile ]] && echo "Could not find Gaussian input file: $inputfile" && exit 1
proc_input $inputfile

# process the "optional" arguments
if [[ -z $account ]]; then
   account=snic2018-2-38 # user modified default account
else
   case $account in
   # account in PDC cluster doesn't contain snic
   tu|snic2018-3-549) account=snic2018-3-549;;
   hans|snic2018-2-38) account=snic2018-2-38;;
   edu|edu18.summer) account=edu18.summer;;
   esac
fi

if [[ ! -z $partition ]]; then
   PARTITION="#SBATCH -p $partition"
   echo "Partition flag $partition is used, make sure it does exist in the current cluster"
   echo "run \"scontrol show partition\" to check\n"
fi

[[ ! -z $exclusive ]] && EXCLUSIVE="#SBATCH --exclusive"
[[ -z $jobname ]] && jobname=${filename}

if [[ ! -z $lindaflag  ]]; then
   Nlinda=$(echo  "$linda" | cut -f2 -d'=')
   if [[ ! -z $(hostname | grep -i tetralith) ]]; then
      [[ ${Nlinda:0:1} != 'n' ]] && echo -e "\nwrong Linda specification on tetralith. please use, e.g. %LindaWorkers=node1,node2\n See https://www.nsc.liu.se/software/installed/tetralith/gaussian for detail\n" && exit 1
      nodes=$(echo "$Nlinda" | awk -F"," '{print NF}')
      nproclinda=$nodes
   elif [[ ! -z $(echo $linda | grep -i "nproclinda") ]]; then
      nproclinda=$Nlinda
      nodes=$Nlinda
   else
      echo "wrong linda specification! please use either %nproclinda=x on rackham or %LindaWorkers=node1,node2... on tetralith\n" && exit 1
   fi
else
   nodes=1
   nproclinda=1   
fi

[[ -z $workdir ]] && workdir=$PWD
[[ -z $gaubin ]] && gaubin='g09'

gethost $account
   
cat > ttt.sh << EOF
#!/bin/bash -l
# sbatch options set by $0
#SBATCH --account=$account 
#SBATCH --cpus-per-task=$iproc
#SBATCH --ntasks-per-node=1
#SBATCH --job-name=$jobname
#SBATCH --nodes=$nodes
#SBATCH --time=$wtime
${EXCLUSIVE}
${PARTITION}
$additional

JOB=$filename
WDIR=$workdir

# Load the Gaussian module
$MOPA
module load $gau_module

cd \$GAUSS_SCRDIR

# Trap SIGTERM and copy the chk file if the job hits the walltime limit
trap 'if [ -f \${JOB}.chk ]; then cp \${JOB}.chk \$WDIR; else echo "No named chk file"; fi; echo "SIGTERM was trapped"' SIGTERM

srun hostname -s | sort -u > tsnet.nodes.\$SLURM_JOBID
export GAUSS_LFLAGS='-nodefile tsnet.nodes.\$SLURM_JOBID -opt "Tsnet.Node.lindarsharg: ssh"'

if [ -f \${WDIR}/\${JOB}.chk ]
then
    cp \${WDIR}/\${JOB}.chk .
fi

$gaubin < \${WDIR}/\${JOB}.${filesuffix} > \${WDIR}/\${JOB}.log &
wait

g_exit_status=\$?

if [ -f \${JOB}.chk ]
then
    mv \${JOB}.chk \$WDIR
fi

exit \$g_exit_status
EOF

[[ -z $dryrun ]] && sbatch ttt.sh
exit 0

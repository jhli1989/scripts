#!/usr/bin/env python
# used to process the ligand PDB outputed from maestro
import sys
import re

def USAGE():
    msg = '\nUSAGE: python %s %s' % (sys.argv[0], 'ligand.pdb charge multiplicity\n\n')
    sys.stdout.write(msg)
    sys.stdout.flush()
    exit(1)

def JUDGE(line):
    message = '\nPlease add the element to the last column of the PDB file!\n'
    message += 'This could be done manually or generated by Pymol\n\n'
    if len(line) < 67:
        sys.stdout.write(message)
        sys.stdout.flush()
        exit(1)
    elif line[67:].strip() == '':
        sys.stdout.write(message)
        sys.stdout.flush()
        exit(1)    

def gau_template(control):
    mol = control[0]
    chg = control[1]
    mul = control[2]
    chk = '%chk=' + mol + '.chk\n'
    if control[3] == 'HEAD':
        msg = chk
        msg += '%nprocshared=32\n'
        msg += '%mem=32GB\n'
        msg += '#p opt b3lyp/6-31G* freq\n'
        msg += '\nNO TITLE\n\n'
        msg += '%s %s\n' % (chg, mul)
    elif control[3] == 'END':
        msg = '\n--link1--\n'
        msg += chk
        msg += '%nprocshared=32\n'
        msg += '%mem=32GB\n'
        msg += '#p hf/6-31G* scf=Tight pop=mk IOp(6/33=2,6/50=1)\n'
        msg += 'geom=check guess=read\n'
        msg += '\nNO TITLE\n\n'
        msg += '%s %s\n\n' % (chg, mul)
        msg += mol + '.esp\n\n\n\n\n'
    return(msg)

def gen_com(pdb, charge, multip):
    mol = pdb.split('/')[-1].split('.')[0]
    com = mol + '.com'
    out = open(com, 'w')
    num = 0
    for line in open(pdb, 'r'):
        if line[0:4] not in ['ATOM', 'HETA']:
            continue
        atom = line[11:17].strip()
        resname = line[17:21].strip()
        resid = line[22:26].strip()
        JUDGE(line)
        num += 1
        # get A-Z and a-z from something like Fe2+ N1+ Cl- Na+ ...
        elemt = ''.join(re.split(r'[^A-Za-z]', line[67:]))
        atom = line[11:17].strip()
        if '_' in atom:
            atom = atom.replace('_', 'd')
        resname = line[17:21].strip()
        resid = line[22:26].strip()
        xyz = line[27:55]
        pdbinfo = ' %s(PDBName=%s,ResName=%s,ResNum=%s)' % (elemt, atom, resname, resid)
        coor = '%-45s%40s\n' % (pdbinfo, xyz)
        if num == 1:
            out.write(gau_template([mol, charge, multip, 'HEAD']))
        out.write(coor)
    out.write(gau_template([mol, charge, multip, 'END']))
    out.close()
    sys.stdout.write('\nDone! number of atoms: %s\n\n' % num)
    sys.stdout.flush()
        
if __name__ == '__main__':
    if len(sys.argv) < 4:
        USAGE()
    pdb = sys.argv[1]
    charge = sys.argv[2]
    multip = sys.argv[3]
    gen_com(pdb, charge, multip)
